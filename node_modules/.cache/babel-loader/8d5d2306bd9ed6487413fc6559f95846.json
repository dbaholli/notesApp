{"ast":null,"code":"const initialState = {\n  notes: []\n};\nexport const ActionTypes = {\n  SET_NOTES: 'SET_NOTES',\n  DELETE_NOTE: 'DELETE_NOTE',\n  NEW_NOTE: 'NEW_NOTE',\n  EDIT_NOTE: 'EDIT_NOTE'\n};\nexport const ActionCreators = {\n  setNotes: payload => ({\n    type: ActionTypes.SET_NOTES,\n    payload\n  }),\n  deleteNote: payload => ({\n    type: ActionTypes.DELETE_NOTE,\n    payload\n  }),\n  newNote: payload => ({\n    type: ActionTypes.NEW_NOTE,\n    payload\n  }),\n  editNote: payload => ({\n    type: ActionTypes.EDIT_NOTE,\n    payload\n  })\n};\nexport default function NotesReducer(state = initialState, action) {\n  switch (action.type) {\n    case ActionTypes.SET_NOTES:\n      return { ...state,\n        notes: [...action.payload]\n      };\n\n    case ActionTypes.DELETE_NOTE:\n      return { ...state,\n        notes: [...state.notes.filter(note => note.id !== action.payload.id)]\n      };\n\n    case ActionTypes.NEW_NOTE:\n      return { ...state,\n        notes: [...state.notes, action.payload]\n      };\n\n    case ActionTypes.EDIT_NOTE:\n      let notes = state.notes.map(note => {\n        if (note.id === action.payload.id) {\n          note = action.payload;\n        }\n\n        return note;\n      });\n      return { ...state,\n        notes: [...notes]\n      };\n\n    default:\n      return state;\n  }\n}\n_c = NotesReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotesReducer\");","map":{"version":3,"sources":["C:/Users/OnLine/shenime.front/src/redux/notesReducer.js"],"names":["initialState","notes","ActionTypes","SET_NOTES","DELETE_NOTE","NEW_NOTE","EDIT_NOTE","ActionCreators","setNotes","payload","type","deleteNote","newNote","editNote","NotesReducer","state","action","filter","note","id","map"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,SAAS,EAAE,WADY;AAEvBC,EAAAA,WAAW,EAAE,aAFU;AAGvBC,EAAAA,QAAQ,EAAE,UAHa;AAIvBC,EAAAA,SAAS,EAAE;AAJY,CAApB;AAOP,OAAO,MAAMC,cAAc,GAAG;AAC1BC,EAAAA,QAAQ,EAAEC,OAAO,KAAK;AAACC,IAAAA,IAAI,EAAER,WAAW,CAACC,SAAnB;AAA8BM,IAAAA;AAA9B,GAAL,CADS;AAE1BE,EAAAA,UAAU,EAAEF,OAAO,KAAK;AAACC,IAAAA,IAAI,EAAER,WAAW,CAACE,WAAnB;AAAgCK,IAAAA;AAAhC,GAAL,CAFO;AAG1BG,EAAAA,OAAO,EAAEH,OAAO,KAAK;AAACC,IAAAA,IAAI,EAAER,WAAW,CAACG,QAAnB;AAA6BI,IAAAA;AAA7B,GAAL,CAHU;AAI1BI,EAAAA,QAAQ,EAAEJ,OAAO,KAAK;AAACC,IAAAA,IAAI,EAAER,WAAW,CAACI,SAAnB;AAA8BG,IAAAA;AAA9B,GAAL;AAJS,CAAvB;AAOP,eAAe,SAASK,YAAT,CAAsBC,KAAK,GAAGf,YAA9B,EAA4CgB,MAA5C,EAAoD;AAC/D,UAAOA,MAAM,CAACN,IAAd;AACI,SAAKR,WAAW,CAACC,SAAjB;AACI,aAAO,EAAC,GAAGY,KAAJ;AAAWd,QAAAA,KAAK,EAAE,CAAC,GAAGe,MAAM,CAACP,OAAX;AAAlB,OAAP;;AACA,SAAKP,WAAW,CAACE,WAAjB;AACI,aAAO,EACH,GAAGW,KADA;AACOd,QAAAA,KAAK,EAAE,CAAC,GAAGc,KAAK,CAACd,KAAN,CAAYgB,MAAZ,CAAmBC,IAAI,IACxCA,IAAI,CAACC,EAAL,KAAYH,MAAM,CAACP,OAAP,CAAeU,EADV,CAAJ;AADd,OAAP;;AAIR,SAAKjB,WAAW,CAACG,QAAjB;AACI,aAAO,EAAC,GAAIU,KAAL;AAAYd,QAAAA,KAAK,EAAE,CAAC,GAAGc,KAAK,CAACd,KAAV,EAAiBe,MAAM,CAACP,OAAxB;AAAnB,OAAP;;AACA,SAAKP,WAAW,CAACI,SAAjB;AACI,UAAIL,KAAK,GAAGc,KAAK,CAACd,KAAN,CAAYmB,GAAZ,CAAgBF,IAAI,IAAI;AAChC,YAAIA,IAAI,CAACC,EAAL,KAAYH,MAAM,CAACP,OAAP,CAAeU,EAA/B,EAAmC;AAC/BD,UAAAA,IAAI,GAAGF,MAAM,CAACP,OAAd;AACH;;AACD,eAAOS,IAAP;AACH,OALW,CAAZ;AAMA,aAAO,EAAE,GAAGH,KAAL;AAAYd,QAAAA,KAAK,EAAE,CAAC,GAAGA,KAAJ;AAAnB,OAAP;;AACR;AACI,aAAOc,KAAP;AAnBR;AAqBH;KAtBuBD,Y","sourcesContent":["const initialState = {\r\n    notes: [],\r\n}\r\n\r\nexport const ActionTypes = {\r\n    SET_NOTES: 'SET_NOTES',\r\n    DELETE_NOTE: 'DELETE_NOTE',\r\n    NEW_NOTE: 'NEW_NOTE',\r\n    EDIT_NOTE: 'EDIT_NOTE',\r\n}\r\n\r\nexport const ActionCreators = {\r\n    setNotes: payload => ({type: ActionTypes.SET_NOTES, payload}),\r\n    deleteNote: payload => ({type: ActionTypes.DELETE_NOTE, payload}),\r\n    newNote: payload => ({type: ActionTypes.NEW_NOTE, payload}),\r\n    editNote: payload => ({type: ActionTypes.EDIT_NOTE, payload}),\r\n}\r\n\r\nexport default function NotesReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case ActionTypes.SET_NOTES:\r\n            return {...state, notes: [...action.payload] };\r\n            case ActionTypes.DELETE_NOTE:\r\n                return {\r\n                    ...state, notes: [...state.notes.filter(note =>\r\n                        note.id !== action.payload.id)]\r\n                }\r\n        case ActionTypes.NEW_NOTE:\r\n            return {... state, notes: [...state.notes, action.payload] }\r\n            case ActionTypes.EDIT_NOTE:\r\n                let notes = state.notes.map(note => {\r\n                    if (note.id === action.payload.id) {\r\n                        note = action.payload\r\n                    }\r\n                    return note;\r\n                })\r\n                return { ...state, notes: [...notes] }\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}